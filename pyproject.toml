[project]
name = "mopidy-vkm"
description = "Mopidy extension for vkm"
readme = "README.md"
requires-python = ">= 3.11"
license = { file = "LICENSE" }
authors = [{ name = "Ronnie McGrog", email = "mcgr0g@users.noreply.github.com" }]
classifiers = [
    "Environment :: No Input/Output (Daemon)",
    "Intended Audience :: End Users/Desktop",
    "Operating System :: OS Independent",
    "Topic :: Multimedia :: Sound/Audio :: Players",
]
dynamic = ["version"]
dependencies = [
    "mopidy >= 3.4.1",
    "pykka >= 3.1.1",
    "vkpymusic >= 3.5.1",
]

[project.urls]
Homepage = "https://github.com/mcgr0g/mopidy-vkm"

#[project.entry-points."mopidy.ext"]
#vkm = "mopidy_vkm:Extension"

[build-system]
requires = ["setuptools >= 66", "setuptools-scm >= 7.1"]
build-backend = "setuptools.build_meta"

[tool.distutils.egg_info]
# side effect after https://github.com/pypa/setuptools-scm/issues/77#issuecomment-2886215987
# and https://github.com/pypa/setuptools/discussions/3348#discussioncomment-6556887
egg_base = "/tmp/egg_info"

[dependency-groups]
dev = [
    "tox",
    { include-group = "lint" },
    { include-group = "tests" },
    { include-group = "typing" },
]
lint = ["ruff", "pre-commit"]
tests = ["pytest", "pytest-cov"]
typing = ["pyright"]

[tool.coverage.paths]
source = ["src/", "*/site-packages/"]

[tool.coverage.run]
source_pkgs = ["mopidy_vkm"]

[tool.coverage.report]
show_missing = true

[tool.pyright]
pythonVersion = "3.11"
typeCheckingMode = "basic"
reportMissingTypeStubs = false
reportPrivateImportUsage = false
include = ["src"]
exclude = ["build", "dist", ".venv"]

[tool.pytest.ini_options]
addopts = ["--cov=mopidy_vkm", "--cov-report=term-missing"]

markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "vk_api: Tests that require VK API",
]

[tool.ruff]
target-version = "py311"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D",       # pydocstyle
    "D203",    # one-blank-line-before-class
    "D213",    # multi-line-summary-second-line
    "TD002",   # missing-todo-author
    "TD003",   # missing-todo-link
    "COM812",  # missing-trailing-comma
    "ISC001",  # single-line-implicit-string-concatenation
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "ARG",  # flake8-unused-arguments
    "D",    # pydocstyle
    "S101", # assert
    "PLR2004", # Magic value comparisons - also used in this project
    "SLF001",  # Private member access - допустимо в тестах
    "F841",    # Unused variables - mock объекты не всегда используются
]
"tests/**/*.py" = [
    "S105",  # Hardcoded password string
    "S106",  # Hardcoded password function argument
    "S107"   # Hardcoded password default value
]

[tool.setuptools_scm]

[tool.tox]
env_list = ["py311", "py312", "py313", "pyright", "ruff-check", "ruff-format"]

[tool.tox.labels]
test = "py{311,312,313}"
lint = "ruff-{check,format}"
typing = "pyright"

[tool.tox.env_run_base]
package = "wheel"
wheel_build_env = ".pkg"
dependency_groups = ["tests"]
commands = [
    ["pytest", "--cov", "--basetemp={envtmpdir}", "{posargs}"],
]

[tool.tox.env.py311]
base_python = "python3.11"
description = "Run tests under Python 3.11"

[tool.tox.env.py312]
base_python = "python3.12"
description = "Run tests under Python 3.12"

[tool.tox.env.py313]
base_python = "python3.13"
description = "Run tests under Python 3.13"

[tool.tox.env.pyright]
dependency_groups = ["typing"]
description = "Run type checking with pyright"
commands = [["pyright", "{posargs:src}"]]

[tool.tox.env.ruff-check]
skip_install = true
dependency_groups = ["ruff"]
description = "Run ruff linting"
commands = [["ruff", "check", "{posargs:.}"]]

[tool.tox.env.ruff-format]
skip_install = true
dependency_groups = ["ruff"]
description = "Check ruff formatting"
commands = [["ruff", "format", "--check", "{posargs:.}"]]

[tool.tox.env.coverage]
dependency_groups = ["tests"]
commands = [
    ["pytest", "--cov", "--cov-report=html", "--cov-report=term-missing"],
    ["coverage", "report", "--show-missing", "--fail-under=80"]
]

[tool.uv]
default-groups = ["dev"]
